import Resources;

class MapParser {
	
	static function parseMap(id) {
		lines = Resources.readText('maps/' + id + '.txt').split('\n');
		tileLines = [];
		width = -1;
		height = 0;
		spriteLines = [];
		music = null;
		doors = {};
		
		mode = null;
		for (line : lines) {
			if (line[0] == '#') {
				parts = line[1:].split(':');
				key = parts[0].trim().lower();
				value = parts[1:]).trim().join(':');
				switch (key) {
					case 'music': music = value; break;
					case 'tiles': mode = 'tiles'; break;
					case 'sprites': mode = 'sprites'; break;
				}
			} else if (mode == 'tiles') {
				items = line;
				if (width == -1) {
					width = items.length;
				} else if (items.length != width) {
					Core.fail(
						"Error while parsing map '" + id + "': row " + (tileLines.length + 1) + 
						" does not have expected number of tiles (" + width + ")");
				}
				tileLines.add(items);
			} else if (mode == 'sprites') {
				spriteLines.add(line.split(','));
			}
		}
		
		if (width == -1) Core.fail("No tile data.");

		height = tileLines.length;
		
		tiles = makeGrid(width, height);
		
		for (y = 0; y < height; ++y) {
			for (x = 0; x < width; +=x) {
				id = tileLines[y][x];
				if (id == '.') tile = null;
				else tile = new Tile(TileStore.get(id), x, y);
				tiles[x][y] = tile;
			}
		}
		
		tempStartDoor = new Door('start', 2, 8);
		doors[tempStartDoor.id] = tempStartDoor;
		doorStartId = tempStartDoor.id;
		return {
			'width': width,
			'height': height,
			'music': music,
			'sprites': spriteLines,
			'tiles': tiles,
			'doors': doors,
			'startDoorId': doorStartId,
		};
	}
}


class Sprite {
	field type;
	field x;
	field y;
	field template;
	field dx = 0;
	field dy = 0;
	field vx = 0.0;
	field vy = 0.0;
	field ground = null;
	field visualHeight = 2.0;
	field effectiveHeight = 1.75;
	field rowColisionCache = null;
	field draggingAgainstWall = false;
	field lastDir = 'east';
	field dead = false;
	field dustCounter = -1;
	field forceAppliedX = 0.0;
	field lastWallDragWasNFramesAgo = 99999;

	constructor(template, x, y) {
		this.type = type;
		this.x = x + 0.0;
		this.y = y + 0.0;
		this.template = template;
	}
	
	function updateHorizontal(scene, dx) {
		
		newX = this.x + dx;
		newCol = Math.floor(newX);
		oldCol = Math.floor(this.x);
		rowBottom = Math.floor(this.y);
		rowTop = Math.floor(this.y - this.effectiveHeight);
		
		if (this.ground == null) {
			// flying horizontally through the air
			
			//////
			// first ensure that no inclines were collided with in the current tile
			//////
			oldColumnTiles = scene.tiles[oldCol];
			if (newCol == oldCol) {
				collisionX = newX % 1; // check the new position if you're only moving in this tile
			} else if (dx < 0) {
				collisionX = 0.0; // check the leftmost point in this tile if you're moving left out of this tile
			} else {
				collisionX = 1.0; // check the rightmost point in this tile if you're moving right out of this tile
			}
			collisionY = (this.y) % 1.0;
			
			bottomTile = oldColumnTiles[rowBottom];
			passable = bottomTile == null || !bottomTile.blocking || bottomTile.bar;
			if (!passable) {
				inclineType = bottomTile.inclineType;
				if (inclineType == 'up') {
					if (collisionX + collisionY >= 1.0) {
						// it's a collision, update feet to stand on ground at collision point
						if (collisionX > 0.99) collisionX = .99;
						if (collisionX < 0.01) collisionX = .01;
						this.ground = bottomTile;
						this.x = oldCol + collisionX + 0.0;
						this.y = rowBottom + 1.0 - collisionX;
						return;
					}
				} else if (inclineType == 'down') {
					if (1 - collisionX + collisionY >= 1.0) {
						// it's a collision, update feet to stand on ground at collision point
						if (collisionX > 0.99) collisionX = .99;
						if (collisionX < 0.01) collisionX = .01;
						this.ground = bottomTile;
						this.x = oldCol + collisionX + 0.0;
						this.y = rowBottom + collisionX + 0.0;
						return;
					}
				} else {
					Core.fail("Somehow managed to move to a tile that isn't an incline");
				}
			} else {
				/*
					You are flying through the air.
					Go ahead and move as far as you can within this same column.
				*/
				if (newCol == oldCol) {
					// move all the way to the destination.
					this.x += dx;
				} else {
					// move as far as you can within this single column.
					originalX = this.x;
					if (newCol > oldCol) {
						// moving to the right.
						newPartialX = oldCol + .99;
					} else {
						// moving to the left
						newPartialX = oldCol + 0.01;
					}
					// take away the amount that you moved from dx and continue on
					diff = newPartialX - this.x;
					dx -= diff;
					this.x = newPartialX;
				}
			}
				
			//////
			// Continue through to the next tile if applicable
			//////
			if (newCol != oldCol) {
				if (newCol >= scene.width) {
					return;
				}
				collisionX = newX % 1.0;
				newColumnTiles = scene.tiles[newCol];
				
				row = rowTop;
				while (row < rowBottom) {
					// any collisions here should be treated as blockers
					// note that this doesn't check the bottom row
					
					tile = newColumnTiles[row];
					if (tile != null && tile.blocking) {
						self.draggingAgainstWall = true;
						self.vx = 0;
						return; // Collision
					}

					row++;
				}
				
				tile = newColumnTiles[rowBottom];
				if (tile == null || !tile.blocking) {
					this.x = newX;
					return;
				}
				
				if (!tile.isIncline) {
					this.draggingAgainstWall = true;
					self.vx = 0;
					return; // Collision
				}
				
				collisionY = self.y % 1.0;
				if (collisionY < 0.01) collisionY = 0.01;
				else if (collisionY > 0.99) collisionY = 0.99;
				
				if (tile.inclineType == 'up') {
					if (oldCol > newCol) {
						this.vx = 0;
						return;
					}
					if (collisionY + collisionX < 1) {
						this.x = newX;
						this.vx = 0;
						return;
					}
					this.x = newCol + 1.0 - collisionY;
					this.y = collisionY + rowBottom;
					this.ground = tile;
					return;
				}
				
				if (tile.inclineType == 'down') {
					if (oldCol < newCol) {
						self.vx = 0;
						return;
					}
					if (collisionY + 1 - collisionX < 1) {
						self.x = newX;
						self.vx = 0;
						return;
					}
					this.x = newCol + collisionY + 1.0;
					this.y = collisionY + rowBottom;
					this.ground = tile;
					return;
				}
					
				Core.fail("Unknown inclineType: '" + tile.inclineType + "'");
			}
		} else {
			// TODO: need to run the newCol == oldCol code block even if you're walking out of the current column
			// In which case, you walk all the way up to the edge - epsilon and then modify dx by the amount traversed.
			
			//////
			// walking on the ground
			//////
			if (newCol == oldCol) {
			
				// Nothing stopping you if you're in the same X coordinate
				this.x = newX;
				
				//////
				// Moving around on a flat tile and doesn't cross boundaries
				//////
				if (!this.ground.isIncline) {
					return;
				}
				
				//////
				// Moving around on an incline and not crossing boundaries
				//////
				ux = this.x % 1.0;
				type = this.ground.inclineType;
				if (ux < 0.01) ux = 0.01;
				else if (ux > 0.99) ux = 0.99;
				
				if (type == 'up') {
					this.y = rowBottom + 1 - ux;
					return;
				} else if (type == 'down') {
					this.y = rowBottom + ux;
					return;
				}
				
				Core.fail("Unknown inclineType: '" + tile.inclineType + "'");
			}
			
			//////
			// Walking out of bounds?
			//////
			if (newCol < 0 || newCol >= scene.width) {
				this.vx = 0;
				return; // Nope
			}
			
			currentGround = this.ground;
			newTileColumn = scene.tiles[newCol];
			
			cleanConnectTile = null;
			cleanConnectY = currentGround.row; // this references the y coordinate, not the nth row, so 4 here means the top of tileColumn[4], just after the bottom of tileColumn[3].
			// TODO: cleanConnect will have to support half-increments.
			
			//////
			// Check what y coordinate the next column should line up with to make a clean continuous platform connection
			//////
			if (currentGround.isIncline) {
				type = currentGround.inclineType;
				if (type == 'up') {
					cleanConnectY = newCol > oldCol ? currentGround.row : (currentGround.row + 1);
				} else if (type == 'down') {
					cleanConnectY = newCol > oldCol ? (currentGround.row + 1) : currentGround.row;
				} else {
					Core.fail("Unknown incline type: '" + type + "'");
				}
			} else {
				cleanConnectY = currentGround.row;
			}
			
			//////
			// Now look for a tile that connects cleanly
			//////
			
			newGroundCandidate = null;
			if (oldCol < newCol) { // coming from the left
				tile = newTileColumn[cleanConnectY - 1];
				if (tile != null && tile.inclineType == 'up') {
					newGroundCandidate = tile;
				} else {
					tile = newTileColumn[cleanConnectY];
					if (tile != null && (!tile.isIncline || tile.inclineType == 'down')) {
						newGroundCandidate = tile;
					}
				}
			} else {
				tile = newTileColumn[cleanConnectY - 1];
				if (tile != null && tile.inclineType == 'down') {
					newGroundCandidate = tile;
				} else {
					tile = newTileColumn[cleanConnectY];
					if (tile != null && (!tile.isIncline || tile.inclineType == 'up')) {
						newGroundCandidate = tile;
					}
				}
			}
			
			if (newGroundCandidate != null) {
				//////
				// Adjust newY
				//////
				ux = newX % 1.0;
				if (ux < 0.01) ux = 0.01;
				else if (ux > 0.99) ux = 0.99;
				
				if (newGroundCandidate.isIncline) {
					type = newGroundCandidate.inclineType;
					if (type == 'up') {
						newY = newGroundCandidate.row + 1.0 - ux;
					} else if (type == 'down') {
						newY = newGroundCandidate.row + ux + 0.0;
					} else {
						Core.fail("Unknown incline type: '" + type + "'");
					}
				} else {
					newY = newGroundCandidate.row + 0.0;
				}
			} else {
				//////
				// If the player is walking off of a platform, then they will enter freefall mode but keep their current Y value initially.
				//////
				newY = self.y;
			}
			
			newRowBottom = Math.floor(newY);
			newRowTop = Math.floor(newY - self.effectiveHeight);
			row = newRowTop;
			collision = false;
			while (row < newRowBottom) { // don't check row bottom
				tile = newTileColumn[row];
				if (tile != null && (tile.blocking || tile.isIncline)) {
					collision = true;
					this.vx = 0;
					break;
				}
				row++;
			}
			if (!collision) {
				this.ground = newGroundCandidate;
				this.x = newX;
				this.y = newY;
			}
		}
	}
	
	function updateVerticalGoingUp(scene, dy) {
		col = Math.floor(this.x);
		newRow = Math.floor(this.y + dy - self.effectiveHeight);
		if (newRow < 0) return; // hit the top
		tile = scene.tiles[col][newRow];
		if (tile != null && (tile.blocking || tile.isIncline)) {
			// head bonks the ceiling
			this.vy = 0.0; // velocity is now 0
			this.y = tile.row + 1.0 + this.effectiveHeight + 0.001;
			return;
		}
		
		this.y += dy;
	}
	
	function updateVerticalGoingDown(scene, dy) {
		col = Math.floor(this.x);
		oldRow = Math.floor(this.y);
		newRow = Math.floor(this.y + dy);
		if (newRow >= scene.height) {
			// fell off the bottom
			// TODO: this will be valid and I'll need to allow this
			// will likely do something that extends the tiles around the edge to infinity.
			return;
		}
		
		columnTiles = scene.tiles[col];
		
		tile = columnTiles[oldRow];
		if (tile == null || (!tile.blocking && !tile.bar)) {
			tile = columnTiles[newRow];
		}
		
		if (tile == null || (!tile.blocking && !tile.bar)) {
			this.y += dy;
			return;
		}
		
		if (!tile.isIncline) {
			this.y = tile.row + 0.0;
			this.ground = tile;
			this.vy = 0;
			return;
		}
		
		type = tile.inclineType;
		ux = this.x % 1.0;
		uy = this.y % 1.0;
		if (ux < 0.01) ux = 0.01;
		else if (ux > 0.99) ux = 0.99;
		
		newY = this.y + dy;
		if (type == 'up') {
			inclineY = tile.row + 1 - ux;
		} else if (type == 'down') {
			inclineY = tile.row + ux;
		} else {
			Core.fail("Unknown incline type: '" + type + "'");
		}
		
		if (newY > inclineY) {
			this.y = inclineY;
			this.ground = tile;
			this.vy = 0;
		} else {
			this.y = newY;
		}
	}
	
	function update(scene, timeRatio) {
		if (this.ground == null) {
			this.vy += GRAVITY * timeRatio;
			this.dy += this.vy;
		} else {
			this.vy = 0;
			this.dy = 0;
		}
		
		this.dx += this.vx;
		
		this.dx *= timeRatio;
		this.dy *= timeRatio;
		
		this.draggingAgainstWall = false;
		this.updateImpl(scene);
	}
	
	// Note: the collision box of the player for the purposes of movement is actually just a vertical line
	function updateImpl(scene) {
		dx = this.dx;
		dy = this.dy;
		
		// nothing to do
		if (dx == 0 && dy == 0) {
			return;
		}
		
		if (this.dustCounter < 0) {
			if (this.ground != null && ((this.forceAppliedX < 0) != (this.vx < 0)) && Math.abs(this.forceAppliedX) > .2) {
				this.dustCounter = 5;
				for (i = 0; i < 5; ++i) {
					dust = new Debris(this.x, this.y, [128, 128, 128], 'grow-and-fade');
					scene.sprites.append(dust);
					dust.vx = this.vx / 10.0 + Random.randomFloat() * 0.03 - 0.015;
					dust.vy = -0.02 + Rnadom.randomFloat() * 0.02;
				}
			}
		} else {
			self.dustCounter--;
		}
			
		
		//////
		// Break the vector into half and call update twice if the vector has a magnitude > 1
		// This simplifies the physics logic. 
		// This also works recursively.
		//////
		if (dx < -1 || dx > 1 || dy < -1 || dy > 1) {
			incrementalDx = this.dx * .5;
			incrementalDy = this.dy * .5;
			for (i = 0; i < 2; ++i) {
				this.dx = incrementalDx;
				this.dy = incrementalDx;
				this.updateImpl(scene);
			}
			return;
		}
		if (dx != 0) {
			this.updateHorizontal(scene, dx);
			if (self.draggingAgainstWall) {
				if (dy <= 0) {
					// moving up or stationary so not really dragging against it
					this.draggingAgainstWall = false;
				} else {
					// slow down descent
					if (dy > .03) {
						dy = .03;
						self.vy = 0.03;
					}
				}
			}
			this.dx = 0;
			if (this.ground != null) {
				this.vy = 0.0;
				dy = 0;
			}
		}
				
		if (dy != 0) {
			if (dy < 0) {
				this.updateVerticalGoingUp(scene, dy);
			} else {
				this.updateVerticalGoingDown(scene, dy);
			}
			this.dy = 0;
		}
		
		if (this.ground != null) {
			this.vy = 0;
		}
		
		if (this.draggingAgainstWall) {
			this.lastWallDragWasNFramesAgo = 0;
			if (this.dustCounter < 0) {
				this.dustCounter = 9;
				x = this.x;
				if (this.x % 1.0 < .5) {
					x -= .35;
				} else {
					x += .35;
				}
				dust = new Debris(x, this.y - 1.7, [128, 128, 128], 'grow-and-fade');
				scene.sprites.add(dust);
				dust.vy = -0.03 + 0.015 * Random.randomFloat();
				dust.vx = -0.01 + 0.02 * Random.randomFloat();
			}
		} else {
			this.lastWallDragWasNFramesAgo++;
		}
	}
		
	
	function render(cameraOffsetX, cameraOffsetY, rtInt) {
		
		// TODO: maybe this should go in update?
		if (this.vx == 0) {
			dir = this.lastDir;
		} else {
			dir = this.vx > 0 ? 'east' : 'west';
			this.lastDir = dir;
		}
			
		centerX = this.x * 32 + cameraOffsetX;
		bottomY = this.y * 32 + cameraOffsetY;
		xOffset = 0;
		yOffset = 0;
		if (this.draggingAgainstWall) {
			if (this.x % 1.0 < .5) {
				dir = 'east';
				xOffset = 8;
			} else {
				dir = 'west';
				xOffset = -8;
			}
			
			path = 'sprites/player/walldrag-' + dir + '-1.png';
		} else {
			num = Math.floor((rtInt % 3) + 1);
			path = 'sprites/player/stand-' + dir + '-' + num + '.png';
		}
		
		img = ImageLibrary.getAtScale(path, 4);
		left = Math.floor(centerX - img.getWidth() / 2 + xOffset);
		top = Math.floor(bottomY - img.get_height() + yOffset);
		img.draw(left, top);
	}
}

		
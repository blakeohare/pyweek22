import Graphics2D;

class OptionsMenu : AbstractScene {

	field background;
	field options;
	field activeIndex = 0;

	constructor(background) : base() {
		this.background = background;
		this.options = [
			['Return', 'return'],
			['Sound Options', 'sound'],
			['Keyboard Options', 'keyboard'],
			['Gamepad Options', 'gamepad'],
		];
	}
	
	function update() {
		for (event : InputManager.getMenuEvents()) {
			if (event == 'up') {
				if (this.activeIndex > 0) {
					this.activeIndex--;
				}
			} else if (event == 'down') {
				if (this.activeIndex < this.options.length - 1) {
					this.activeIndex++;
				}
			} else if (event == 'enter') {
				command = this.options[this.activeIndex][1];
				switch (command) {
					case 'return':
						this._next = this.background;
						this.background._next = null;
						break;
					case 'gamepad':
						this._next = new JoystickMenu(this);
						break;
					case 'sound':
						print("Not implemented.");
						break;
					case 'keyboard':
						print("Not implemented.");
						break;
				}
			}
		}

		if (InputManager.escapePressed) {
			this._next = this.background;
			this.background._next = null;
		}
	}

	function render() {
		this.background.render();
		
		left = SCREEN_WIDTH / 4;
		width = SCREEN_WIDTH / 2;
		top = SCREEN_WIDTH / 8;
		height = SCREEN_HEIGHT * 3 / 4;
		Draw.rectangle(
			left, top, width, height,
			0, 0, 0, 160);
		
		// TODO: center these with text render dry-run
		x = left + 80;
		y = top + 30;
		for (i = 0; i < this.options.length; ++i) {
			option = this.options[i];
			label = option[0];
			TextRenderer.render(label, x, y);
			if (i == this.activeIndex) {
				Draw.rectangle(
					x - 20, y, 10, 10,
					255, 255, 255);
			}
			y += 60;
		}
	}
}
